// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.EF;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.DataModels.Brand", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Entities.DataModels.Company", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Entities.DataModels.Machine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("BrandId")
                        .HasColumnType("smallint");

                    b.Property<short>("Hired")
                        .HasColumnType("smallint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("MainAndSubCategoryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Saled")
                        .HasColumnType("smallint");

                    b.Property<short>("Stock")
                        .HasColumnType("smallint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("MainAndSubCategoryId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Entities.DataModels.MainCategory", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            ImagePath = "/Images/MainCategory/category1.png",
                            Name = "İş Makineleri"
                        },
                        new
                        {
                            Id = (byte)2,
                            ImagePath = "/Images/MainCategory/category2.png",
                            Name = "Güç Makineleri"
                        },
                        new
                        {
                            Id = (byte)3,
                            ImagePath = "/Images/MainCategory/category3.png",
                            Name = "Yedek Parça"
                        },
                        new
                        {
                            Id = (byte)4,
                            ImagePath = "/Images/MainCategory/category4.png",
                            Name = "Hizmetler"
                        });
                });

            modelBuilder.Entity("Entities.DataModels.Role", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "User"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Editor"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Entities.DataModels.SubCategory", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            ImagePath = "/Images/SubCategory/category1.png",
                            Name = "Paletli Ekskavatörler"
                        },
                        new
                        {
                            Id = (byte)2,
                            ImagePath = "/Images/SubCategory/category2.png",
                            Name = "Lastikli Yükleyiciler"
                        },
                        new
                        {
                            Id = (byte)3,
                            ImagePath = "/Images/SubCategory/category3.png",
                            Name = "Greyderler"
                        },
                        new
                        {
                            Id = (byte)4,
                            ImagePath = "/Images/SubCategory/category4.png",
                            Name = "Dozerler"
                        },
                        new
                        {
                            Id = (byte)5,
                            ImagePath = "/Images/SubCategory/category5.png",
                            Name = "Kazıcı Yükleyiciler"
                        });
                });

            modelBuilder.Entity("Entities.DataModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("CompanyId")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("char(24)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.RelationModels.MainAndSubCategory", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<byte>("MainCategoryId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SubCategoryId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("MainAndSubCategories");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            MainCategoryId = (byte)1,
                            SubCategoryId = (byte)1
                        },
                        new
                        {
                            Id = (byte)2,
                            MainCategoryId = (byte)1,
                            SubCategoryId = (byte)2
                        },
                        new
                        {
                            Id = (byte)3,
                            MainCategoryId = (byte)1,
                            SubCategoryId = (byte)3
                        },
                        new
                        {
                            Id = (byte)4,
                            MainCategoryId = (byte)1,
                            SubCategoryId = (byte)4
                        },
                        new
                        {
                            Id = (byte)5,
                            MainCategoryId = (byte)1,
                            SubCategoryId = (byte)5
                        });
                });

            modelBuilder.Entity("Entities.RelationModels.UserAndRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersAndRoles");
                });

            modelBuilder.Entity("Entities.DataModels.Machine", b =>
                {
                    b.HasOne("Entities.DataModels.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.RelationModels.MainAndSubCategory", "MainAndSubCategory")
                        .WithMany()
                        .HasForeignKey("MainAndSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("MainAndSubCategory");
                });

            modelBuilder.Entity("Entities.DataModels.User", b =>
                {
                    b.HasOne("Entities.DataModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Entities.RelationModels.MainAndSubCategory", b =>
                {
                    b.HasOne("Entities.DataModels.MainCategory", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DataModels.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Entities.RelationModels.UserAndRole", b =>
                {
                    b.HasOne("Entities.DataModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
